<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\template.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\template.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Tue Jul 05 20:29:01 2016
<BR><P>
<H3>Maximum Stack Usage =        180 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; DMACNT_Init &rArr; DMA_Init &rArr; DMA_SetEnableReq &rArr; assert_failed &rArr; UART_printf &rArr; printn &rArr;  printn (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[ea]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[46]">ADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[46]">ADC0_IRQHandler</a><BR>
 <LI><a href="#[da]">printn</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[da]">printn</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[46]">ADC0_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[47]">ADC1_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[2b]">CAN0_Bus_Off_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[2c]">CAN0_Error_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[2a]">CAN0_ORed_Message_buffer_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[2e]">CAN0_Rx_Warning_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[2d]">CAN0_Tx_Warning_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[2f]">CAN0_Wake_Up_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[33]">CAN1_Bus_Off_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[34]">CAN1_Error_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[32]">CAN1_ORed_Message_buffer_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[36]">CAN1_Rx_Warning_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[35]">CAN1_Tx_Warning_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[37]">CAN1_Wake_Up_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[48]">CMP0_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[49]">CMP1_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[4a]">CMP2_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[4e]">CMT_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[5e]">DAC0_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[5f]">DAC1_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[d]">DMA0_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[17]">DMA10_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[18]">DMA11_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[19]">DMA12_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[1a]">DMA13_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[1b]">DMA14_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[1c]">DMA15_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[e]">DMA1_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[f]">DMA2_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[10]">DMA3_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[11]">DMA4_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[12]">DMA5_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[13]">DMA6_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[14]">DMA7_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[15]">DMA8_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[16]">DMA9_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[1d]">DMA_Error_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[75]">DefaultISR</a> from startup_mk60dz10.o(.text) referenced 136 times from startup_mk60dz10.o(RESET)
 <LI><a href="#[58]">ENET_1588_Timer_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[5b]">ENET_Error_IRQHandler</a> from enet.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[5a]">ENET_Receive_IRQHandler</a> from enet.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[59]">ENET_Transmit_IRQHandler</a> from enet.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[1f]">FTFL_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[4b]">FTM0_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[4c]">FTM1_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[4d]">FTM2_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[25]">I2C0_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[26]">I2C1_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[5c]">I2S0_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[22]">LLW_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[62]">LPTimer_IRQHandler</a> from isr.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[21]">LVD_LVW_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[61]">MCG_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[1e]">MCM_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[55]">PDB0_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[51]">PIT0_IRQHandler</a> from isr.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[52]">PIT1_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[53]">PIT2_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[54]">PIT3_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[64]">PORTA_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[65]">PORTB_IRQHandler</a> from isr.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[66]">PORTC_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[67]">PORTD_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[68]">PORTE_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[24]">RNG_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[4f]">RTC_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[20]">Read_Collision_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[63]">Reserved102_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[69]">Reserved108_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[6a]">Reserved109_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[6b]">Reserved110_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[6c]">Reserved111_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[6d]">Reserved112_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[6e]">Reserved113_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[6f]">Reserved114_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[70]">Reserved115_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[71]">Reserved116_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[72]">Reserved117_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[73]">Reserved118_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[74]">Reserved119_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[30]">Reserved51_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[31]">Reserved52_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[38]">Reserved59_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[39]">Reserved60_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[50]">Reserved83_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[5d]">SDHC_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[27]">SPI0_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[28]">SPI1_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[29]">SPI2_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[76]">SystemInit</a> from system_mk60dz10.o(.text) referenced from startup_mk60dz10.o(.text)
 <LI><a href="#[60]">TSI0_IRQHandler</a> from isr.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[3b]">UART0_ERR_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[3a]">UART0_RX_TX_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[3d]">UART1_ERR_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[3c]">UART1_RX_TX_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[3f]">UART2_ERR_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[3e]">UART2_RX_TX_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[41]">UART3_ERR_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[40]">UART3_RX_TX_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[43]">UART4_ERR_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[42]">UART4_RX_TX_IRQHandler</a> from isr.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[45]">UART5_ERR_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[44]">UART5_RX_TX_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[56]">USB0_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[57]">USBDCD_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[23]">Watchdog_IRQHandler</a> from startup_mk60dz10.o(.text) referenced from startup_mk60dz10.o(RESET)
 <LI><a href="#[78]">__main</a> from __main.o(!!!main) referenced from startup_mk60dz10.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[78]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[79]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[7b]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[ec]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[ed]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[7c]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[ee]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[80]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[ef]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[f1]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[f2]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[f4]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[f5]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[f7]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[f9]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[fa]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[fb]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[fc]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[fd]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[fe]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[ff]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[100]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[101]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[102]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[103]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[85]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[104]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[105]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[106]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[107]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[108]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[109]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[7a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[10a]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[7d]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7f]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[10b]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[81]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; DMACNT_Init &rArr; DMA_Init &rArr; DMA_SetEnableReq &rArr; assert_failed &rArr; UART_printf &rArr; printn &rArr;  printn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[10c]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[eb]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[84]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[10d]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[86]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[d1]"></a>__asm___6_enet_c_1ac3582e____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, enet.o(.revsh_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MacRecData
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MacSendData
</UL>

<P><STRONG><a name="[76]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, system_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(.text)
</UL>
<P><STRONG><a name="[10e]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 308 bytes, Stack size 0 bytes, system_mk60dz10.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CAN0_Bus_Off_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CAN0_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN0_ORed_Message_buffer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN0_Rx_Warning_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN0_Tx_Warning_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN0_Wake_Up_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN1_Bus_Off_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN1_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN1_ORed_Message_buffer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>CAN1_Rx_Warning_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN1_Tx_Warning_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CAN1_Wake_Up_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DAC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>ENET_1588_Timer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FTFL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>FTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>FTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>FTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>I2S0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>LLW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>MCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>MCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>PDB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>PIT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>PIT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>PIT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>PORTA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>PORTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>PORTD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>PORTE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>Read_Collision_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>Reserved102_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>Reserved108_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>Reserved109_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>Reserved110_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>Reserved111_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>Reserved112_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>Reserved113_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>Reserved114_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>Reserved115_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>Reserved116_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>Reserved117_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>Reserved118_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>Reserved119_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>Reserved51_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>Reserved52_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>Reserved59_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>Reserved60_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>Reserved83_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SDHC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>UART0_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART0_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>UART1_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>UART1_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART2_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART2_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART3_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART3_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>UART4_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>UART5_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>UART5_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>USB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>USBDCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Watchdog_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60dz10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mk60dz10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[82]"></a>main</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = main &rArr; DMACNT_Init &rArr; DMA_Init &rArr; DMA_SetEnableReq &rArr; assert_failed &rArr; UART_printf &rArr; printn &rArr;  printn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_printf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DebugPortInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockSetup
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_String
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Num3
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_ChangeDuty
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCPUInfo
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACNT_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACNT_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[97]"></a>assert_failed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = assert_failed &rArr; UART_printf &rArr; printn &rArr;  printn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetITStatus
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ITConfig
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Stop
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Start
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_SetLoadValue
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetCurrentValue
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetLoadValue
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTM_ResetTimeCounter
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTM_DelayMs
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTM_GetITStatus
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTM_ITConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTM_GetTimerCounterValue
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTM_GetCompareValue
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTM_SetCompareValue
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTM_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputData
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_ClearITPendingBit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_GetITStatus
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_ITConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IsComplete
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetEnableReq
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVectorTable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ClearITPendingBit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTM_ClearITPendingBit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockSetup
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_ChangeDuty
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMACmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendDataInt
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetITStatus
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[42]"></a>UART4_RX_TX_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, isr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART4_RX_TX_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendDataIntProcess
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>PIT0_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, isr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = PIT0_IRQHandler &rArr; PIT_ClearITPendingBit &rArr; assert_failed &rArr; UART_printf &rArr; printn &rArr;  printn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ClearITPendingBit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>PORTB_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PORTB_IRQHandler &rArr; GPIO_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>TSI0_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, isr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TSI0_IRQHandler &rArr; UART_printf &rArr; printn &rArr;  printn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSI_GetChannelOutOfRangleFlag
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSI_ClearAllITPendingFlag
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>LPTimer_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LPTimer_IRQHandler &rArr; LPTM_ClearITPendingBit &rArr; assert_failed &rArr; UART_printf &rArr; printn &rArr;  printn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTM_ClearITPendingBit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>DMACNT_Init</STRONG> (Thumb, 206 bytes, Stack size 64 bytes, dmacnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = DMACNT_Init &rArr; DMA_Init &rArr; DMA_SetEnableReq &rArr; assert_failed &rArr; UART_printf &rArr; printn &rArr;  printn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>DMACNT_GetValue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dmacnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DMACNT_GetValue &rArr; DMA_SetCurrDataCounter &rArr; assert_failed &rArr; UART_printf &rArr; printn &rArr;  printn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>GetCPUInfo</STRONG> (Thumb, 736 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockSetup
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MiiInit
</UL>

<P><STRONG><a name="[88]"></a>SystemClockSetup</STRONG> (Thumb, 714 bytes, Stack size 16 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SystemClockSetup &rArr; assert_failed &rArr; UART_printf &rArr; printn &rArr;  printn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCPUInfo
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>NVIC_Init</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[10f]"></a>SystemSoftReset</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>EnableInterrupts</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>DisableInterrupts</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>SetVectorTable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[db]"></a>GetFWVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCPUInfo
</UL>

<P><STRONG><a name="[8b]"></a>DelayInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DelayInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCPUInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>DelayUs</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, delay.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>DelayMs</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Init
</UL>

<P><STRONG><a name="[113]"></a>DMA_StructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>DMA_SetEnableReq</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DMA_SetEnableReq &rArr; assert_failed &rArr; UART_printf &rArr; printn &rArr;  printn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>

<P><STRONG><a name="[a0]"></a>DMA_Init</STRONG> (Thumb, 434 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DMA_Init &rArr; DMA_SetEnableReq &rArr; assert_failed &rArr; UART_printf &rArr; printn &rArr;  printn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetEnableReq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACNT_Init
</UL>

<P><STRONG><a name="[a7]"></a>DMA_IsComplete</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[a2]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DMA_SetCurrDataCounter &rArr; assert_failed &rArr; UART_printf &rArr; printn &rArr;  printn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACNT_GetValue
</UL>

<P><STRONG><a name="[a1]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DMA_GetCurrDataCounter &rArr; assert_failed &rArr; UART_printf &rArr; printn &rArr;  printn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACNT_GetValue
</UL>

<P><STRONG><a name="[114]"></a>DMA_ITConfig</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>DMA_GetITStatus</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>FTM_PWM_ChangeDuty</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, ftm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = FTM_PWM_ChangeDuty &rArr; assert_failed &rArr; UART_printf &rArr; printn &rArr;  printn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>FTM_Init</STRONG> (Thumb, 598 bytes, Stack size 32 bytes, ftm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = FTM_Init &rArr; FTM_PWM_ChangeDuty &rArr; assert_failed &rArr; UART_printf &rArr; printn &rArr;  printn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_SetMode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_ChangeDuty
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>FTM_ITConfig</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, ftm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[aa]"></a>FTM_GetITStatus</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, ftm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[ab]"></a>FTM_ClearITPendingBit</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, ftm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[8d]"></a>GPIO_Init</STRONG> (Thumb, 648 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GPIO_Init &rArr; assert_failed &rArr; UART_printf &rArr; printn &rArr;  printn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACNT_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Pin_Init
</UL>

<P><STRONG><a name="[117]"></a>GPIO_GetITStates</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>GPIO_ClearITPendingBit</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTB_IRQHandler
</UL>

<P><STRONG><a name="[118]"></a>GPIO_StructInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>GPIO_WriteBit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[ad]"></a>GPIO_SetBits</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[ae]"></a>GPIO_ResetBits</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[af]"></a>GPIO_ToggleBit</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[b0]"></a>GPIO_Write</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[b1]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[b2]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[92]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GPIO_ReadInputDataBit &rArr; assert_failed &rArr; UART_printf &rArr; printn &rArr;  printn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>GPIO_ReadInputData</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[b4]"></a>LPTM_Init</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, lptm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[b5]"></a>LPTM_SetCompareValue</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lptm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[b6]"></a>LPTM_GetCompareValue</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lptm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[b7]"></a>LPTM_GetTimerCounterValue</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lptm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[b8]"></a>LPTM_ITConfig</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lptm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[b9]"></a>LPTM_GetITStatus</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lptm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTM_DelayMs
</UL>

<P><STRONG><a name="[9f]"></a>LPTM_ClearITPendingBit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lptm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LPTM_ClearITPendingBit &rArr; assert_failed &rArr; UART_printf &rArr; printn &rArr;  printn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTimer_IRQHandler
</UL>

<P><STRONG><a name="[ba]"></a>LPTM_DelayMs</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lptm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTM_GetITStatus
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[bb]"></a>LPTM_ResetTimeCounter</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lptm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[bc]"></a>PIT_Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, pit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCPUInfo
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[bd]"></a>PIT_GetLoadValue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[be]"></a>PIT_GetCurrentValue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[bf]"></a>PIT_SetLoadValue</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, pit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[c0]"></a>PIT_Start</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, pit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[c1]"></a>PIT_Stop</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, pit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[c2]"></a>PIT_ITConfig</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, pit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[c3]"></a>PIT_GetITStatus</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, pit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[9b]"></a>PIT_ClearITPendingBit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, pit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PIT_ClearITPendingBit &rArr; assert_failed &rArr; UART_printf &rArr; printn &rArr;  printn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT0_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>TSI_GetCounter</STRONG> (Thumb, 246 bytes, Stack size 0 bytes, tsi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSI_SelfCalibration
</UL>

<P><STRONG><a name="[c4]"></a>TSI_SelfCalibration</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tsi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSI_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSI_Init
</UL>

<P><STRONG><a name="[c6]"></a>TSI_Init</STRONG> (Thumb, 350 bytes, Stack size 20 bytes, tsi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSI_SelfCalibration
</UL>

<P><STRONG><a name="[119]"></a>TSI_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, tsi.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>TSI_GetITStatus</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, tsi.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>TSI_ClearITPendingBit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, tsi.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>TSI_GetChannelOutOfRangleFlag</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tsi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSI0_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>TSI_ClearAllITPendingFlag</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tsi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSI0_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>ENET_HashAddress</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, enet.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetAddress
</UL>

<P><STRONG><a name="[c7]"></a>ENET_SetAddress</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, enet.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_HashAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Init
</UL>

<P><STRONG><a name="[cd]"></a>ENET_MiiRead</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, enet.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MiiLinkState
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Init
</UL>

<P><STRONG><a name="[ce]"></a>ENET_MiiWrite</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, enet.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Init
</UL>

<P><STRONG><a name="[c9]"></a>ENET_MiiInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, enet.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCPUInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Init
</UL>

<P><STRONG><a name="[ca]"></a>ENET_Init</STRONG> (Thumb, 870 bytes, Stack size 16 bytes, enet.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_printf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MiiInit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MiiWrite
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MiiRead
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetAddress
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_BDInit
</UL>

<P><STRONG><a name="[cf]"></a>ENET_MiiLinkState</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, enet.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MiiRead
</UL>

<P><STRONG><a name="[d0]"></a>ENET_MacSendData</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, enet.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_enet_c_1ac3582e____REVSH
</UL>

<P><STRONG><a name="[d2]"></a>ENET_MacRecData</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, enet.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_enet_c_1ac3582e____REVSH
</UL>

<P><STRONG><a name="[59]"></a>ENET_Transmit_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, enet.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>ENET_Receive_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, enet.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>ENET_Error_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, enet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ENET_Error_IRQHandler &rArr; UART_printf &rArr; printn &rArr;  printn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60dz10.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>UART_Init</STRONG> (Thumb, 592 bytes, Stack size 32 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UART_Init &rArr; assert_failed &rArr; UART_printf &rArr; printn &rArr;  printn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCPUInfo
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DebugPortInit
</UL>

<P><STRONG><a name="[89]"></a>UART_DebugPortInit</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = UART_DebugPortInit &rArr; UART_Init &rArr; assert_failed &rArr; UART_printf &rArr; printn &rArr;  printn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>UART_ITConfig</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[d6]"></a>UART_GetITStatus</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[9a]"></a>UART_SendData</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RX_TX_IRQHandler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_printf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printn
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_puts
</UL>

<P><STRONG><a name="[d7]"></a>UART_SendDataInt</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[d8]"></a>UART_DMACmd</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[98]"></a>UART_SendDataIntProcess</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RX_TX_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>UART_ReceiveData</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RX_TX_IRQHandler
</UL>

<P><STRONG><a name="[91]"></a>UART_printf</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_printf &rArr; printn &rArr;  printn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printn
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_puts
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTimer_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSI0_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT0_IRQHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCPUInfo
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Error_IRQHandler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Init
</UL>

<P><STRONG><a name="[8a]"></a>DisplayCPUInfo</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DisplayCPUInfo &rArr; UART_printf &rArr; printn &rArr;  printn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFWVersion
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>OLED_WrDat</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, oled.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Picture
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Char
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>

<P><STRONG><a name="[dd]"></a>OLED_WrCmd</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, oled.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_XY
</UL>

<P><STRONG><a name="[dc]"></a>OLED_Set_XY</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OLED_Set_XY
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Picture
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Char
</UL>

<P><STRONG><a name="[de]"></a>OLED_Clear</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OLED_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrCmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[e1]"></a>OLED_Delay_ms</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, oled.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[e0]"></a>OLED_Pin_Init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = OLED_Pin_Init &rArr; GPIO_Init &rArr; assert_failed &rArr; UART_printf &rArr; printn &rArr;  printn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[8c]"></a>OLED_Init</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = OLED_Init &rArr; OLED_Pin_Init &rArr; GPIO_Init &rArr; assert_failed &rArr; UART_printf &rArr; printn &rArr;  printn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Pin_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Delay_ms
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_XY
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>OLED_Write_Char</STRONG> (Thumb, 650 bytes, Stack size 20 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_Write_Char &rArr; OLED_Set_XY
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_XY
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_String
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Num3
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Num2
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Num5
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Num4
</UL>

<P><STRONG><a name="[e3]"></a>OLED_Write_Picture</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, oled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_XY
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
</UL>

<P><STRONG><a name="[94]"></a>OLED_Write_String</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OLED_Write_String &rArr; OLED_Write_Char &rArr; OLED_Set_XY
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Char
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>OLED_Write_Num3</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OLED_Write_Num3 &rArr; OLED_Write_Char &rArr; OLED_Set_XY
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Char
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>OLED_Write_Num4</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, oled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Char
</UL>

<P><STRONG><a name="[e5]"></a>OLED_Write_Num5</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, oled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Char
</UL>

<P><STRONG><a name="[e6]"></a>OLED_Write_Num2</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, oled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Char
</UL>

<P><STRONG><a name="[d3]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendDataInt
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_MacRecData
</UL>

<P><STRONG><a name="[e7]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[11c]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[120]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[83]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[123]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[124]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[125]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a8]"></a>FTM_PWM_SetMode</STRONG> (Thumb, 1076 bytes, Stack size 12 bytes, ftm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FTM_PWM_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_Init
</UL>

<P><STRONG><a name="[cb]"></a>ENET_BDInit</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, enet.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Init
</UL>

<P><STRONG><a name="[cc]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, enet.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Init
</UL>

<P><STRONG><a name="[d9]"></a>UART_puts</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_printf
</UL>

<P><STRONG><a name="[da]"></a>printn</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + In Cycle
<LI>Call Chain = printn &rArr;  printn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printn
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_printf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printn
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
